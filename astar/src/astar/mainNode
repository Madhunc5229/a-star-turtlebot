#!/usr/bin/env python3
import rospy
from std_msgs.msg import String
import geometry_msgs.msg

import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
import numpy as np
import math

from queue import PriorityQueue

import cmap
from collections import defaultdict
import cv2
import time



def isInObstacle(point):
    if 1000 > point[0] and point[0] > 0 and   point[1] < 1000 and point[1]> 0:
        if np.array_equal(cmap.gmap[999-int(point[1]),int(point[0]),0], 255):
            return True
    elif 1000 < point[0] or point[0] < 0 or   point[1] > 1000 or point[1]< 0:
        return True
    else:

        return False


def cuvrePoints(current_point,UL,UR):
    Xi = current_point[0]
    Yi = current_point[1]
    Thetai = current_point[2]
    t = 0

    r = 3.3
    L = 34
    dt = 0.01
    Xn = Xi
    Yn = Yi
    Thetan = 3.14 * Thetai / 180
    D = 0
    Xs = []
    Ys = []
    UL = UL * 2 * np.pi / 60.0
    UR = UL * 2 * np.pi / 60.0
    while t<1:
        Xs.append(Xn)
        Ys.append(Yn)
        t = t + dt
        dx = 0.5*r * (UL + UR) * math.cos(Thetan)
        dy = 0.5*r * (UL + UR) * math.sin(Thetan)

        Delta_Xn = dx * dt
        Delta_Yn = dy * dt
        Xn += Delta_Xn
        Yn += Delta_Yn
        Thetan += (r / L) * (UR - UL) * dt
        D=D+ math.sqrt(math.pow((0.5*r * (UL + UR) * math.cos(Thetan) * dt),2)+math.pow((0.5*r * (UL + UR) * math.sin(Thetan) * dt),2))
        # if isInObstacle((Xn, Yn)):
        #     break
    Thetan = 180 * (Thetan) / 3.14

    return Xs, Ys


def cost(current_point,UL,UR):
    
    Xi = current_point[0]
    Yi = current_point[1]
    Thetai = current_point[2]
    t = 0

    # r = 0.33
    # L = 1.6
    
    r = 3.8
    L = 34
    
    dt = 0.01
    Xn = Xi
    Yn = Yi
    Thetan = 3.14 * Thetai / 180
    D = 0
    Xs = []
    Ys = []
    # UL_rad = UL * 2 * np.pi / 60.0
    # UR_rad = UL * 2 * np.pi / 60.0
    
    new_theta = (r/L)*(UR-UL)
    while t<1:
        Xs.append(Xn)
        Ys.append(Yn)
        t = t + dt
        dx = 0.5*r * (UL + UR) * math.cos(Thetan)
        dy = 0.5*r * (UL + UR) * math.sin(Thetan)
        Delta_Xn =  dx * dt
        Delta_Yn = dy * dt
        Xn += Delta_Xn
        Yn += Delta_Yn
        Thetan += (r / L) * (UR - UL) * dt
        D=D+ math.sqrt(math.pow((0.5*r * (UL + UR) * math.cos(Thetan) * dt),2)+math.pow((0.5*r * (UL + UR) * math.sin(Thetan) * dt),2))
 
    Thetan = 180 * (Thetan) / 3.14
    
    return [Xn, Yn, Thetan, D, 0, (dx, dy, new_theta)]

def getNeighbours(current_point):
    outcomes = []
    for action in actions:

        new_point = cost(current_point,action[0], action[1])
        print(new_point[5])
        new_point[4] = actions.index(action)

        if isInObstacle(new_point):
            continue
        else:
            outcomes.append(new_point)

    return outcomes

def costToGo(point, goal_point):
    #Computation of distance between two points
    dist = np.linalg.norm(np.array([point[0],point[1]]-np.array([goal_point[0],goal_point[1]])))

    return dist

def thresh(pt):
    t = 0.5
    return int(pt[0]/t), int(pt[1]/t)

def plotCurves(points):

    for point in points:
        for action in actions:
            Xs, Ys = cuvrePoints(point, action[0], action[1])
            if isInObstacle([Xs[-1],Ys[-1]]):
                    continue
            else:
                for i in range(1, len(Xs)):
                    cv2.line(cmap.gmap, (int(Xs[i]), 999 - int(Ys[i])), (int(Xs[i-1]), 999 - int(Ys[i-1])), [255, 0, 0], 2)
                    cv2.imshow("Exploration",cmap.gmap)
                    cv2.waitKey(1)
            # if cv2.waitKey(0) & 0xFF == ord('q'):
            #     break

    
def backTrack(dict, final_point, start_point, image):

    path = [(round(final_point[0],0),round(final_point[1],0),final_point[4],current_point[5])]
    
    i = (round(final_point[0],0),round(final_point[1],0),final_point[4],current_point[5])

    dict_keys = list(dict.keys())

    dict_values = list(dict.values())

    reached_start_point = False

    while not reached_start_point:
        for children in dict_values:
            for a in children:

                if i[0]==a[0] and i[1]==a[1]:
                    
                    v = i
                    image[999-int(i[1]),int(i[0])] = (255,0,255)
                    j = dict_values.index(children)
                    path.append(dict_keys[j])
                    i = dict_keys[j]
                    cv2.line(image,(int(v[0]),int(999-v[1])),(int(i[0]),int(999-i[1])),(255,0,255),1)
            if (i[0] == start_point[0]) and (i[1] == start_point[1]):
                return path[::-1]

def takeInput():

    start = input("Input Staring Position in format: x,y,theta\n")
    x_start,y_start,theta_s = int(start.split(',')[0]), int(start.split(',')[1]),int(start.split(',')[2])

    # #Checking if the entered input is valid
    while isInObstacle([x_start,y_start]):
        print("Start point is in obstacle space. Please enter valid point.")
        start = input("Input Staring Position in format: x,y,theta\n")
        x_start,y_start,theta_s = int(start.split(',')[0]), int(start.split(',')[1]),int(start.split(',')[2])

    goal = input("Enter the Goal Position in format: x,y\n")
    x_goal,y_goal = int(goal.split(',')[0]), int(goal.split(',')[1])
        
    while isInObstacle([x_goal,y_goal]) :
        print("Goal point is in obstacle space. Please enter valid point")
        goal = input("Enter the Goal Position in format: x,y\n")
        x_goal,y_goal = int(goal.split(',')[0]), int(goal.split(',')[1])
        
    start_point = [x_start,y_start,theta_s,0,0,(0,0,0)]
    goal_point = [x_goal,y_goal]

    return start_point, goal_point


def move_robot(pub_vel, dvx, dvy, dw):
    r = rospy.Rate(100)
    vel_value = geometry_msgs.msg.Twist()
    velocity = np.sqrt(dvx * dvx + dvy * dvy)/100.0
    endTime = rospy.Time.now() + rospy.Duration(1)
    
    while rospy.Time.now() < endTime:
        vel_value.linear.x = velocity
        vel_value.angular.z = dw
        pub_vel.publish(vel_value)
        r.sleep()

def move_tt(path):

    rospy.init_node('turtlebot_astar')
    pub_vel = rospy.Publisher('cmd_vel', geometry_msgs.msg.Twist, queue_size=10)
    time.sleep(2)
    # action_set = list()
    for elem in path:
        print(elem[3])
        dvx, dvy, dw = elem[3]
        move_robot(pub_vel, dvx, dvy, dw)
    move_robot(pub_vel, 0., 0., 0.)


if __name__=='__main__':

    global actions

    x,y = input("Enter the two RPM values: rpm1, rpm2: ").split(',')
    x= float(x)
    y = float(y)
    actions = [[0,x],[x,0],[x,x],[0,y],[y,0],[y,y],[x,y],[y,x]]

    
    c2c = np.full((2000,2000), np.inf)  

    totalCost = np.full((2000,2000),np.inf)


    start_point, end_point = takeInput()
    print("Computing path....")
    

    c2c[thresh(start_point)] = 0

    totalCost[thresh(start_point)] = c2c[thresh(start_point)] + costToGo(list(thresh(start_point)),end_point)

    x = totalCost[thresh(start_point)]

    open = PriorityQueue()

    open.put((x,start_point))

    parent = defaultdict(list)

    visited = np.full((2000,2000),-1)

    explored = []

    while True:

        _, current_point = open.get()
        explored.append(current_point)
        
        # print(current_point)


        if (end_point[0])-30 <= current_point[0] <= (end_point[0])+30 and (end_point[1])-30 <= current_point[1] <= (end_point[1])+30 :
            print("goal reached")


            path = backTrack(parent,current_point, start_point,cmap.gmap)

            print("Path: ",path)
            cv2.imshow("Result ",cv2.resize(cmap.gmap,(500,500)))
            # cv2.waitKey(0)

            if cv2.waitKey(0) & 0xFF == ord('q'):
                break

            break
            
        if visited[thresh(current_point)] != -1 :

            continue

        else:

            new_points = getNeighbours(current_point)

            for point in new_points:
                pt = [point[0],point[1], point[2]]
                newC2C = c2c[thresh(current_point)] + point[3]

                if newC2C < c2c[thresh(pt)]:

                    c2c[thresh(pt)] = newC2C

                    totalCost[thresh(pt)] = 0.455*c2c[thresh(pt)] + 0.555*costToGo(point, end_point)


                    parent[(round(current_point[0],0), round(current_point[1],0),current_point[4],current_point[5])].append((round(point[0],0),round(point[1],0),round(point[2],0),current_point[5]))
                    
                open.put((totalCost[thresh(pt)], point))

                visited[thresh(current_point)] = 1
    
    try:

        # radius = 33
        # wheel_distance = 160
        move_tt(path)
    except rospy.ROSInterruptException:
        pass


    
